#!/bin/bash -e
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This script will download, setup, start, and stop servers for Kafka, YARN, and ZooKeeper,
# as well as downloading, building and locally publishing Samza

if [ -z "$JAVA_HOME" ]; then
  if [ -x /usr/libexec/java_home ]; then
    export JAVA_HOME="$(/usr/libexec/java_home)"
  else
    echo "JAVA_HOME not set. Exiting."
    exit 1
  fi
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR=$DIR
DEPLOY_ROOT_DIR=$BASE_DIR/deploy
DOWNLOAD_CACHE_DIR=$HOME/.samza/download
COMMAND=$1
SYSTEM=$2
KERNEL=$(uname)

SERVICE_WAIT_TIMEOUT_SEC=120

KIBANA_PORT=5601
ELASTICSEARCH_PORT=9200

DOWNLOAD_ELASTICSEARCH=https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.tar.gz
DOWNLOAD_KIBANA=

if [ $KERNEL == "Linux" ]; then
    DOWNLOAD_KIBANA_64=https://artifacts.elastic.co/downloads/kibana/kibana-5.6.3-linux-x86_64.tar.gz
elif [ $KERNEL == "Darwin" ]; then
    DOWNLOAD_KIBANA_64=https://artifacts.elastic.co/downloads/kibana/kibana-5.6.3-darwin-x86_64.tar.gz
else
    echo 'Your operating system is not currently supported'
    echo $KERNEL
    exit 1
fi

install_all() {
  $DIR/grid-elastic install elasticsearch
  $DIR/grid-elastic install kibana
}

install_elasticsearch() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  install elasticsearch $DOWNLOAD_ELASTICSEARCH elasticsearch-5.6.3
}

install_kibana() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  if [ $KERNEL == "Linux" ]; then
    install kibana $DOWNLOAD_KIBANA_64 kibana-5.6.3-linux-x86_64
  elif [ $KERNEL == "Darwin" ]; then
    install kibana $DOWNLOAD_KIBANA_64 kibana-5.6.3-darwin-x86_64
  fi
}

install() {
  DESTINATION_DIR="$DEPLOY_ROOT_DIR/$1"
  DOWNLOAD_URL=$2
  PACKAGE_DIR="$DOWNLOAD_CACHE_DIR/$3"
  PACKAGE_FILE="$DOWNLOAD_CACHE_DIR/$(basename $DOWNLOAD_URL)"
  if [ -f "$PACKAGE_FILE" ]; then
    echo "Using previously downloaded file $PACKAGE_FILE"
  else
    echo "Downloading $(basename $DOWNLOAD_URL)..."
    mkdir -p $DOWNLOAD_CACHE_DIR
    curl "$DOWNLOAD_URL" > "${PACKAGE_FILE}.tmp"
    mv "${PACKAGE_FILE}.tmp" "$PACKAGE_FILE"
  fi
  rm -rf "$DESTINATION_DIR" "$PACKAGE_DIR"
  tar -xf "$PACKAGE_FILE" -C $DOWNLOAD_CACHE_DIR
  mv "$PACKAGE_DIR" "$DESTINATION_DIR"
}

start_all() {
  $DIR/grid-elastic start elasticsearch
  $DIR/grid-elastic start kibana
}

start_elasticsearch() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/elasticsearch ]; then
    $DEPLOY_ROOT_DIR/$SYSTEM/bin/elasticsearch -d
    wait_for_service "elasticsearch" $ELASTICSEARCH_PORT
  else
    echo 'Elasticsearch is not installed. Run: grid-elastic install elasticsearch'
  fi
}

start_kibana() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/kibana ]; then
    mkdir -p $DEPLOY_ROOT_DIR/$SYSTEM/logs
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    nohup bin/kibana > logs/kibana.log 2>&1 &
    cd - > /dev/null
    wait_for_service "kibana" $KIBANA_PORT
  else
    echo 'Kibana is not installed. Run: grid-elastic install kibana'
  fi
}

wait_for_service() {
  local SERVICE_NAME=$1
  local PORT=$2
  echo "Waiting for $SERVICE_NAME to start..."
  local CURRENT_WAIT_TIME=0
  until $(nc -w 1 localhost $PORT); do
    printf '.'
    sleep 1
    if [ $((++CURRENT_WAIT_TIME)) -eq $SERVICE_WAIT_TIMEOUT_SEC ]; then
      printf "\nError: timed out while waiting for $SERVICE_NAME to start.\n"
      exit 1
    fi
  done
  printf '\n'
  echo "$SERVICE_NAME has started";
}

stop_all() {
  $DIR/grid-elastic stop elasticsearch
  $DIR/grid-elastic stop kibana
}

stop_elasticsearch() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/elasticsearch ]; then
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    ps ax | grep -i 'elasticsearch' | grep java | grep -v grep | awk '{print $1}' | xargs kill -SIGTERM
    cd - > /dev/null
  else
    echo 'Elasticsearch is not installed. Run: grid-elastic install elasticsearch'
  fi
}

stop_kibana() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/bin/kibana ]; then
    cd $DEPLOY_ROOT_DIR/$SYSTEM
    ps ax | grep -i 'kibana.js' | grep -v grep | awk '{print $1}' | xargs kill -SIGTERM
    cd - > /dev/null
  else
    echo 'Kibana is not installed. Run: grid-elastic install elasticsearch'
  fi
}

# Check arguments
if (test -z "$COMMAND" && test -z "$SYSTEM") \
  || ( [ "$COMMAND" == "help" ] || test -z "$COMMAND" || test -z "$SYSTEM"); then
  echo
  echo "  Usage.."
  echo
  echo "  $ grid-elastic"
  echo "  $ grid-elastic install [elasticsearch|kibana|all]"
  echo "  $ grid-elastic start [elasticsearch|kibana|all]"
  echo "  $ grid-elastic stop [elasticsearch|kibana|all]"
  echo
  exit 1
else
  echo "EXECUTING: $COMMAND $SYSTEM"

  "$COMMAND"_"$SYSTEM"
fi